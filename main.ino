/*********************************************************************
Author: Matthew Waddell
Use: ESP SSID Fun
*********************************************************************/

//includes for 1306
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

//includes for ESP8266
#include <ESP8266WiFi.h>

//Settings
#define OLED_RESET LED_BUILTIN //4
Adafruit_SSD1306 display(OLED_RESET);
const int led = 13;

//check if screen is set correctly
#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

const unsigned char PROGMEM logo [] = {
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3F, 0xFF, 0xFF, 0xFF, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xFE, 0x01, 0xFC, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x1F, 0xF0, 0x00, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x03, 0xF8, 0x20, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0xC4, 0x3F, 0xE0, 0x01, 0x88, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x18, 0x24, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x9C, 0x00, 0x00, 0xC9, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x14, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x02, 0x00, 0x3F, 0xE0, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0x03, 0xE0, 0x01, 0xEF, 0xF0, 0x00, 0xC0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x38, 0x07, 0xF8, 0x03, 0x87, 0xC8, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x73, 0x0F, 0xFE, 0x03, 0x3F, 0xFC, 0x80, 0xB0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x7F, 0x83, 0xF0, 0x08, 0x18, 0x28, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xD4, 0x00, 0x06, 0x01, 0x81, 0x00, 0xFF, 0x14, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xA9, 0xE0, 0x02, 0x00, 0x01, 0xC3, 0xC1, 0x86, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x83, 0xF9, 0x02, 0x00, 0x00, 0x7F, 0x90, 0xC2, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x1F, 0x06, 0x00, 0x00, 0x00, 0x10, 0x43, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x80, 0x48, 0x0C, 0x01, 0x80, 0x00, 0x78, 0x43, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x88, 0x40, 0x38, 0x03, 0xC0, 0x03, 0xCE, 0x43, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x64, 0xC0, 0x70, 0x00, 0x60, 0x0F, 0x1F, 0x43, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x50, 0xC1, 0x78, 0x1E, 0x60, 0x7C, 0x18, 0xC2, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x25, 0xE0, 0x0C, 0x00, 0xC1, 0xF8, 0x38, 0x96, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x31, 0xF8, 0x07, 0x80, 0x0F, 0x08, 0x70, 0x24, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x11, 0xDE, 0x03, 0x00, 0x78, 0x0F, 0xE0, 0x1C, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x11, 0xD7, 0xE0, 0x1F, 0xF0, 0x3E, 0x60, 0x30, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x19, 0xD1, 0xFF, 0xF8, 0x10, 0xFC, 0xC0, 0x20, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x19, 0xD3, 0x04, 0x10, 0x1F, 0xF8, 0x80, 0x60, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x19, 0xF3, 0x04, 0x10, 0x3F, 0x89, 0x80, 0xC0, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0xFE, 0x0F, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0xF8, 0x06, 0x01, 0x80, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xFF, 0x88, 0x1C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x19, 0xFF, 0xFF, 0xF8, 0x0C, 0x38, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0xBD, 0xCE, 0x08, 0x04, 0xF0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0xF6, 0xC6, 0x08, 0x07, 0xC0, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x66, 0x62, 0x08, 0x0F, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x10, 0x3F, 0x62, 0x08, 0x7C, 0x23, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x1F, 0xFF, 0xFF, 0xE0, 0x8C, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x7F, 0xF0, 0x02, 0x33, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x20, 0x00, 0x00, 0x08, 0x87, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x10, 0x00, 0x00, 0x66, 0x3C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x31, 0x06, 0x00, 0x06, 0x20, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0xC0, 0x00, 0x01, 0x03, 0xC0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x38, 0x00, 0x80, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0C, 0x00, 0x00, 0x3F, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x01, 0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x03, 0xFF, 0xFF, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x7F, 0xF0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
};

void printEncryptionType(int thisType) {
  // read the encryption type and print out the name:
  switch (thisType) {
    case ENC_TYPE_WEP:
      Serial.println("WEP");
      break;
    case ENC_TYPE_TKIP:
      Serial.println("WPA");
      break;
    case ENC_TYPE_CCMP:
      Serial.println("WPA2");
      break;
    case ENC_TYPE_NONE:
      Serial.println("None");
      break;
    case ENC_TYPE_AUTO:
      Serial.println("Auto");
      break;
  }
}

void listNetworks() {
  // scan for nearby networks:
  Serial.println("** Scan Networks **");
  int numSsid = WiFi.scanNetworks();
  if (numSsid == -1) {
    Serial.println("Couldn't get a wifi connection");
    while (true);
  }

  // print the list of networks seen:
  Serial.print("Number of available networks: ");
  Serial.println(numSsid);

  // print the network number and name for each network found:
  for (int thisNet = 0; thisNet < numSsid; thisNet++) {
    Serial.print(thisNet + 1);
    Serial.print(") ");
    Serial.print(WiFi.SSID(thisNet));
    Serial.print("\tSignal: ");
    Serial.print(WiFi.RSSI(thisNet));
    Serial.print(" dBm");
    Serial.print("\tEncryption: ");
    printEncryptionType(WiFi.encryptionType(thisNet));
  }

  // get top 3 network signals
  int firstpos = -1, secondpos = -1, thirdpos = -1, fourthpos = -1, fifthpos = -1, sixthpos = -1;

  if (numSsid > 0) {
    for (int i=0; i<numSsid; i++) {
      if (firstpos == -1 || WiFi.RSSI(firstpos) < WiFi.RSSI(i)) {
        firstpos = i;
      }
    }
  }
  
  if (numSsid > 1) {
    for (int i=0; i<numSsid; i++) {
      if (i != firstpos) {
        if (secondpos == -1 || WiFi.RSSI(secondpos) < WiFi.RSSI(i)) {
          secondpos = i;
        }
      }
    }
  }

  if (numSsid > 2) {
    for (int i=0; i<numSsid; i++) {
      if (i != firstpos && i != secondpos) {
        if (thirdpos == -1 || WiFi.RSSI(thirdpos) < WiFi.RSSI(i)) {
          thirdpos = i;
        }
      }
    }
  }

  if (numSsid > 3) {
    for (int i=0; i<numSsid; i++) {
      if (i != firstpos && i != secondpos && i != thirdpos) {
        if (fourthpos == -1 || WiFi.RSSI(fourthpos) < WiFi.RSSI(i)) {
          fourthpos = i;
        }
      }
    }
  }

  if (numSsid > 4) {
    for (int i=0; i<numSsid; i++) {
      if (i != firstpos && i != secondpos && i != thirdpos && i != fourthpos) {
        if (fifthpos == -1 || WiFi.RSSI(fifthpos) < WiFi.RSSI(i)) {
          fifthpos = i;
        }
      }
    }
  }

  if (numSsid > 5) {
    for (int i=0; i<numSsid; i++) {
      if (i != firstpos && i != secondpos && i != thirdpos && i != fourthpos && i != fifthpos) {
        if (sixthpos == -1 || WiFi.RSSI(sixthpos) < WiFi.RSSI(i)) {
          sixthpos = i;
        }
      }
    }
  }

  display.clearDisplay();
  
  display.setCursor(0,0);
  display.print("Networks: ");
  display.println(numSsid);

  if (numSsid > 0) {
    display.setCursor(0,8*2);
    display.print(WiFi.SSID(firstpos).substring(0,16));
    display.setCursor(105,8*2);
    display.println(WiFi.RSSI(firstpos));
  }

  if (numSsid > 1) {
    display.setCursor(0,8*3);
    display.print(WiFi.SSID(secondpos).substring(0,16));
    display.setCursor(105,8*3);
    display.println(WiFi.RSSI(secondpos));
  }

  if (numSsid > 2) {
    display.setCursor(0,8*4);
    display.print(WiFi.SSID(thirdpos).substring(0,16));
    display.setCursor(105,8*4);
    display.println(WiFi.RSSI(thirdpos));
  }

  if (numSsid > 3) {
    display.setCursor(0,8*5);
    display.print(WiFi.SSID(fourthpos).substring(0,16));
    display.setCursor(105,8*5);
    display.println(WiFi.RSSI(fourthpos));
  }

  if (numSsid > 4) {
    display.setCursor(0,8*6);
    display.print(WiFi.SSID(fifthpos).substring(0,16));
    display.setCursor(105,8*6);
    display.println(WiFi.RSSI(fifthpos));
  }

  if (numSsid > 5) {
    display.setCursor(0,8*7);
    display.print(WiFi.SSID(sixthpos).substring(0,16));
    display.setCursor(105,8*7);
    display.println(WiFi.RSSI(sixthpos));
  }
  
  display.display();
}

void setup(void)   {                
  pinMode(led, OUTPUT);
  digitalWrite(led, 0);
  Serial.begin(9600);

  // Initialize screen
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.clearDisplay();
  display.setCursor(30,0);
  display.println("Wifi Locator");
  display.drawBitmap(0, 8,  logo, 128, 64, WHITE);
  display.display();
  delay(1000);
  
  Serial.println("");
  Serial.println("");

}

void loop() {
  listNetworks();
}
